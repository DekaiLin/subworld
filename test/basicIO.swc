Z Z main;          # goto main
################################################################################
# global varaiables
################################################################################
Z:          [0, 0];    # zero
NEG1:       [-1];   # negative one, used fo incrementing
ONE:        [1];    # one, used for decrementing

################################################################################
# goto(label): goto label (side effect: set Z to 0)
################################################################################
define(`goto', `
        # goto $1
        Z Z $1;')

################################################################################
# halt: halt program
################################################################################
define(`halt', `
        # halt
        Z Z -1;')

################################################################################
# zero(label): set value at label to zero
################################################################################
define(`zero', `
        # zero $1
        $1 $1;')

################################################################################
# sub(a b): subtract a from b, store the result at b
################################################################################
define(`sub', `
        # sub $1 $2
        $1 $2;')

################################################################################
# inc(a): inrement a
################################################################################
define(`inc', `
        # inc $1
        NEG1 $1;')

################################################################################
# dec(a): decrement a
################################################################################
define(`dec', `
        # dec $1
        ONE $1;')

################################################################################
# movneg(a b): move -a to b
################################################################################
define(`movneg', `
        # movneg $1 $2
        zero($2, $2)
        sub($1, $2)')

################################################################################
# putchar(label): put a single character at label to stdout
################################################################################
define(`putchar',`
        # putchar $1
        $1 -1;')
    
################################################################################
# getchar(label): get a single character from stdin, and store it at label
################################################################################
define(`getchar', `
        # getchar $1
        zero($1)
        -1 $1;')

################################################################################
# puts(label): prints a string at 'label' to stdout                             
################################################################################
puts_label: [-1];
define(`puts_c', `0')
define(`puts',`define(`puts_c', incr(puts_c))
        # puts $1
        movneg(`puts_start_'puts_c, puts_label)
    `puts_start_'puts_c:
        $1 -1 `puts_end_'puts_c;
        inc(`puts_start_'puts_c);
        goto(`puts_start_'puts_c);
    `puts_end_'puts_c:
        movneg(puts_label, `puts_start_'puts_c)')

################################################################################
# zeros(label): deletes string in memory (ZEROs a String)
################################################################################
zeros_label: [-1];
define(`zeros_c', `0')
define(`zeros',`define(`zeros_c', incr(zeros_c))
        # zeros $1
        movneg(`zeros_ref_'zeros_c`.0', zeros_label)
    `zeros_ref_'zeros_c:
        $1 Z `zeros_end_'zeros_c;
        $1 $1;
        inc(`zeros_ref_'zeros_c`.0')
        inc(`zeros_ref_'zeros_c`.3')
        inc(`zeros_ref_'zeros_c`.4')
        Z Z `zeros_ref'zeros_c;
    `zeros_end_'zeros_c:
        movneg(zeros_label, `zeross_ref_'zeros_c`.0')
        movneg(zeros_label, `zeross_ref_'zeros_c`.3')
        movneg(zeros_label, `zeross_ref_'zeros_c`.4')')


################################################################################
# getline(buffer, untilChar): reads stdin into 'buffer' until it encounters 
# 'untilChar', null, or EOF.
################################################################################
gL_character: [-1];
gL_pointer: [-1];
define(`gL_c', `0')
define(`getline', `define(`gL_c', incr(gL_c))
        # getLine $1
        movl($1, gL_pointer)                    # initialise pointer
    `gL_start_'gL_c:
        zero(gL_character)                          # zero A
        -1 gL_character `gL_continue_'gL_c;         # write negative character to A, break if null or EOF
        goto(`gL_finalise_'gL_c)
    `gL_continue_'gL_c:
        beq($2, gL_character, `gL_finalise_'gL_c) # break if character equal to terminating character.
        movp(gL_character, gL_pointer)
        inc(gL_pointer)
        goto(`gL_start_'gL_c)
    `gL_finalise_'gL_c:                         # restore pointers.
        movp(Z, gL_pointer)')                     # null terminate string

################################################################################
# mov(a, b) set $b = $a, the variable at a
################################################################################
define(`mov',`
        # mov $1 $2
        zero($2)
        sub($1, Z)
        sub(Z, $2)
        zero(Z)')

################################################################################
# movl(a, b) set $b = a, the literal a
################################################################################
define(`movl_c', `0')
define(`movl',`define(`movl_c', incr(movl_c))
        # movl $1 $2
        zero($2)
        sub(`movl_data_'movl_c, Z)
        sub(Z, $2)
        goto(`movl_end_'movl_c)
    `movl_data_'movl_c: [$1];
    `movl_end_'movl_c:')

################################################################################
# movp(a, b) MOVe Pointer: set *b = $a, the variable at a
################################################################################
define(`movp_c', `0')
define(`movp', `define(`movp_c', incr(movp_c))
        # movp $1 $2
        zero(`movp_ptr_'movp_c`.0')
        zero(`movp_ptr_'movp_c`.1')
        zero(`movp_ptr_'movp_c`.7')
        sub($2, Z)
        sub(Z, `movp_ptr_'movp_c`.0')
        sub(Z, `movp_ptr_'movp_c`.1')
        sub(Z, `movp_ptr_'movp_c`.7')
        zero(Z)
    `movp_ptr_'movp_c:
        zero(-1)    # the -1s here will be assigned
        sub($1, Z)
        sub(Z, -1)  # the -1 here will be assigned
        zero(Z)')

################################################################################
# deref(a, b) set $b = *a
################################################################################
define(`deref_c', `0')
define(`deref',`define(`deref_c', incr(deref_c))
        # deref $1 $2
        mov($1, `deref_ptr_'deref_c) # modify the instruction below to point to "a"
        zero($2)
    `deref_ptr_'deref_c:
        sub(-1, Z)  # the negative one here will be the value at "a"
        sub(Z, $2)
        zero(Z)')

################################################################################
# beq(a, b, c) branch if a = b.
################################################################################
beq_buffer: [-1, -1];
define(`beq',`
        # beq $1 $2 $3
        zero(beq_buffer.0)
        zero(beq_buffer.1)
        sub($1, beq_buffer.0)
        sub($2, beq_buffer.1)
        sub(beq_buffer.0 beq_buffer.1)
        bz(beq_buffer.1, $3)')

################################################################################
# bneq(a, b, c) branch if a != b.
################################################################################
define(`bneq_c', `0')
define(`bneq',`define(`bneq_c', incr(bneq_c))
        # bneq $1 $2 $3
        beq($1, $2, `bneq_end_'bneq_c)
        goto($3)
    `bneq_end_'bneq_c:')

################################################################################
# bleq(a, b) branch to b if a <= 0.
################################################################################
define(`bleq',`
        # bleq $1 $2
        Z $1 $2')

################################################################################
# bgeq(a, b) branch to b if a >= 0.
################################################################################
define(`bgeq_c', `0')
define(`bgeq',`define(`bgeq_c', incr(bgeq_c))
        # bgeq $1 $2
        $1 Z `bgeq_branch'bgeq_c;
        goto(`bgeq_end_'bgeq_c)
    `bgeq_branch'bgeq_c:
        goto($2)    # gotos required to set Z to zero
    `bgeq_end_'bgeq_c:')

################################################################################
# bz(a, b) branch to 'b' if 'a' is zero.
################################################################################
define(`bz_c', `0')
define(`bz',`define(`bz_c', incr(bz_c))
        # bz $1 $2 
        $1 Z `bz_test2_'bz_c;
        goto(`bz_end_'bz_c);
    `bz_test2_'bz_c:
        zero(Z)
        bleq($1, $2);
    `bz_end_'bz_c:')

###############################################################################

NEWLINE: "\n";
here: "h";
greeting: "Please enter your name: \n\0";
suffix: "!\n\0";
prefix: "Hello, \0";
pointer: [-1];
character: [-1];

main:

    puts(greeting)
    getline(nameBuffer, NEWLINE)

    puts(prefix)
    puts(nameBuffer)
    puts(suffix)
    
    halt   

nameBuffer:
